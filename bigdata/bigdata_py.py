# -*- coding: utf-8 -*-
"""bigdata.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PrICkhYLlccjtgAeaKMwIlGaeHuXwn5N
"""

from google.colab import drive
drive.mount('/content/drive')#連接雲端硬碟

import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
import statistics
import matplotlib.font_manager as fm
from scipy.stats import sem
from scipy.stats import skew
df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/bigdata/Sale2016.csv',encoding="big5")
print(df)
#設定字型
fontPath ='/content/drive/My Drive/Colab Notebooks/font/TaipeiSansTCBeta-Regular.ttf'
font = fm.FontProperties(fname=fontPath, size=15)

#鄉鎮區
DISTRICT = df.groupby(["CITY","DISTRICT"])
DISTRICT_ARRAY=[]
for key,group in DISTRICT:
  if(key[0]=="澎湖縣"):
    DISTRICT_ARRAY.append(key[1])
print(DISTRICT_ARRAY)

#計算空值+缺值
df.isnull().sum()

"""#資料相關資訊"""

df.info(verbose=False)

"""#補值"""

#子女數(補值)
df["CHILDREN"]=df["CHILDREN"].fillna("NULL")
df["CARD_TYPE"]=df["CARD_TYPE"].fillna("非信用卡")
df["MOBILE_PAYMENT"]=df["MOBILE_PAYMENT"].fillna(2)
df["AD_CLICK"]=df["AD_CLICK"].fillna(-1)
df["AD_TIME"]=df["AD_TIME"].fillna(0)

"""#檢查"""

#狀況一
flag=0
for i in range(0,df.shape[0]):
  if(df["MARITAL_STATUS"][i]==0 and df["CHILDREN"][i]!="NULL"):
    print("錯誤列為第",i,"列")
    flag=1
if(flag==0):
  print("狀況一是否有錯誤:否")

#狀況二
flag2=0
for i in range(0,df.shape[0]):
  if(df["AD_EXPO"][i]==0 and df["AD_TIME"][i]!=-1):
    print("錯誤列為第",i,"列")
    flag2=1
if(flag2==0):
  print("狀況二是否有錯誤:否")
#狀況三
flag3=0
for i in range(0,df.shape[0]):
  if(df["AD_CLICK"][i]==0 and df["AD_TIME"][i]!=-1):
    print("錯誤列為第",i,"列")
    flag3=1
if(flag3==0):
  print("狀況三是否有錯誤:否")
#狀況四
flag4=0
for i in range(0,df.shape[0]):
  if(df["AD_EXPO"][i]==0 and df["AD_CLICK"][i]!=-1):
    print("錯誤列為第",i,"列")
    flag4=1
if(flag4==0):
  print("狀況四是否有錯誤:否")
#狀況五
flag5=0
for i in range(0,df.shape[0]):
  if(df["PAYBY"][i]!="信用卡" and df["CARD_TYPE"][i]!="非信用卡"):
    print("錯誤列為第",i,"列")
    flag5=1
if(flag5==0):
  print("狀況五是否有錯誤:否")

"""#1.ID"""

#消費者人數
consumer=df["ID"].unique() #所有消費者ID
consumer_count=np.array(df["ID"].unique()).shape
consumer.sort()
print("消費者ID範圍:",consumer[0],"~",consumer[consumer_count[0]-1])
print("消費者人數:",consumer_count[0],"人")

"""#2.COUNT_TEMP (筆數註記)"""

#筆數註記
COUNT_TEMP_COUNT=df.groupby(["ID","COUNT_TEMP"])#筆數註記數量
COUNT_TEMP_total=0
i=0
COUNT_TEMP_ID=[]
for key,group in COUNT_TEMP_COUNT:
  i=i+1
  COUNT_TEMP_ID.append(key[1])
  COUNT_TEMP_total=COUNT_TEMP_total+key[1]



print("==========================================2.筆數註記==========================================")
print("最多為:",max(COUNT_TEMP_ID),"筆")
print("最低為:",min(COUNT_TEMP_ID),"筆")
print("範圍:",max(COUNT_TEMP_ID)-min(COUNT_TEMP_ID))
print("平均:",round(statistics.mean(COUNT_TEMP_ID),2))
print("中位數:",round(statistics.median(COUNT_TEMP_ID),2))
print("眾數:",round(statistics.mode(COUNT_TEMP_ID),2))
print("標準誤差:",round(sem(COUNT_TEMP_ID),2))
print("標準差:",round(statistics.stdev(COUNT_TEMP_ID),2))
print("變異數:",round(statistics.variance(COUNT_TEMP_ID),2))
print("歪斜率:",round(skew(COUNT_TEMP_ID),2))
print("總和:",round(sum(COUNT_TEMP_ID),2))
print("數量:",i)

"""#3.性別"""

#性別
SEX = df["SEX"]
man=0
woman=0                      
SEX_COUNT=df.groupby(["ID","SEX"])#計算男女數量
female=0
male=0
for key,group in SEX_COUNT:
  if(key[1]=="女"):
    female=female+1
  elif(key[1]=="男"):
    male=male+1
print("male:",male,"人","female:",female,"人")

#圓餅圖
category =["male","female"]
sex_num=[male,female]
# 設定顏色
color = ['#87cefa', '#ff69b4']
# 設定圓餅圖大小
plt.figure(figsize=(12,8))
# 依據類別數量，分別設定要突出的距離
separeted = (0, 0, 0.3, 0, 0, 0)      
# 設定圓餅圖屬性
pictures,category_text,percent_text = plt.pie(
        sex_num,              # 數值
        colors = color,         # 指定圓餅圖的顏色
        labels = category,       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影
# 設定legnd的位置
plt.legend(loc = "upper right")
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("SEX_NUMBER", x=0.5, y=1.03)
# 畫出圓餅圖
plt.show()
plt.close()

"""#4.年齡"""

#年齡
AGE = df.groupby(["ID","AGE"])
AGE_1=0 #10~19
AGE_2=0 #20~29
AGE_3=0 #30~39
AGE_4=0 #40~49
AGE_5=0 #50~59
AGE_6=0 #60~69
AGE_7=0 #70~79
AGE_8=0 #80~89
AGE_9=0 #90~99
AGE_ARRAY=[]
AGE_ARRAY2=[]
AGE_COUNT=[0,0,0,0,0,0,0,0,0]
AGE_STA=["[10~19]","[20~29]","[30~39]","[40~49]","[50~59]","[60~69]","[70~79]","[80~89]","[90~99]"]
for key,group in AGE:
  if(key[1]<=19 and key[1]>=10):
    AGE_COUNT[0]=AGE_COUNT[0]+1;
  elif(key[1]<=29 and key[1]>=20):
    AGE_COUNT[1]=AGE_COUNT[1]+1;
  elif(key[1]<=39 and key[1]>=30):
    AGE_COUNT[2]=AGE_COUNT[2]+1;
  elif(key[1]<=49 and key[1]>=40):
    AGE_COUNT[3]=AGE_COUNT[3]+1;
  elif(key[1]<=59 and key[1]>=50):
    AGE_COUNT[4]=AGE_COUNT[4]+1;
  elif(key[1]<=69 and key[1]>=60):
    AGE_COUNT[5]=AGE_COUNT[5]+1;
  elif(key[1]<=79 and key[1]>=70):
    AGE_COUNT[6]=AGE_COUNT[6]+1;
  elif(key[1]<=89 and key[1]>=80):
    AGE_COUNT[7]=AGE_COUNT[7]+1;
  elif(key[1]<=99 and key[1]>=90):
    AGE_COUNT[8]=AGE_COUNT[8]+1;
  AGE_ARRAY.append(key)
  AGE_ARRAY2.append(key[1])
AGE_ARRAY.sort(key=lambda x:x[1])
print("==========================================4.年齡==========================================")

print(" [10~19]:",AGE_COUNT[0],"人\n","[20~29]:",AGE_COUNT[1],"人\n","[30~39]:",AGE_COUNT[2],"人\n","[40~49]:",AGE_COUNT[3],
      "人\n","[50~59]:",AGE_COUNT[4],"人\n","[60~69]:",AGE_COUNT[5],"人\n",
      "[70~79]:",AGE_COUNT[6],"人\n","[80~89]:",AGE_COUNT[7],"人\n","[90~99]:",AGE_COUNT[8],"人\n",)

print("最大為:",max(AGE_ARRAY2))
print("最小為:",min(AGE_ARRAY2))
print("範圍:",max(AGE_ARRAY2)-min(AGE_ARRAY2))
print("平均:",round(statistics.mean(AGE_ARRAY2),2))
print("中位數:",round(statistics.median(AGE_ARRAY2),2))
print("眾數:",round(statistics.mode(AGE_ARRAY2),2))
print("標準誤差:",round(sem(AGE_ARRAY2),2))
print("標準差:",round(statistics.stdev(AGE_ARRAY2),2))
print("變異數:",round(statistics.variance(AGE_ARRAY2),2))
print("歪斜率:",round(skew(AGE_ARRAY2),2))
print("總和:",round(sum(AGE_ARRAY2),2))
print("數量:",i)
#長條圖
plt.title("AGE_NUMBER", x=0.5, y=1.03)
plt.bar(AGE_STA,
        AGE_COUNT, 
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )
plt.ylabel("num")
plt.xlabel("age")
plt.xticks(rotation='vertical')
plt.show()
plt.close()

"""#5.婚姻狀況"""

#婚姻狀況
MARRY = df.groupby(["ID","MARITAL_STATUS"])
MARRY_ARRAY=[]
unmarried=0
married=0
for key,group in MARRY:
  if(key[1]==1):
    married=married+1
  elif(key[1]==0):
    unmarried=unmarried+1
  MARRY_ARRAY.append(key[1])
print("==========================================5.婚姻狀況==========================================")  

print("結婚人數:",married,"人","未婚人數:",unmarried,"人")
pie_array=[married,unmarried]
pictures,category_text,percent_text = plt.pie(
        [married,unmarried],              # 數值
        colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = ["married","unmarried"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影
# 設定legnd的位置
plt.legend(loc = "upper right")
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("MARITAL_STATUS", x=0.5, y=1.03)
# 畫出圓餅圖
plt.show()
plt.close()

"""#6.縣市"""

#城市
CITY = df.groupby(["ID","CITY"])
CITY_class=df["CITY"].unique() #所有消費者ID

CITY_ARRAY=[]
CITY_COUNT_ARRAY=np.zeros(CITY_class.shape[0],int)
CITY2_ARRAY=["北部","中部","東部","南部","離島"]
CITY2_COUNT_ARRAY=[0,0,0,0,0]#分北中南東離島

i=0
count=0
for key,group in CITY:
  i=i+1
  for j in range(0,CITY_class.shape[0]):
    if(CITY_class[j]==key[1]):
      CITY_COUNT_ARRAY[j]=CITY_COUNT_ARRAY[j]+1
    if(key[1]=="台北市" or key[1]=="新北市" or key[1]=="基隆市" or key[1]=="新竹市"or key[1]=="桃園市"or key[1]=="新竹縣"):
      CITY2_COUNT_ARRAY[0]=CITY2_COUNT_ARRAY[0]+1
    elif(key[1]=="台中市" or key[1]=="苗栗縣" or key[1]=="彰化縣" or key[1]=="南投縣"or key[1]=="雲林縣"):
      CITY2_COUNT_ARRAY[1]=CITY2_COUNT_ARRAY[1]+1
    elif(key[1]=="花蓮縣" or key[1]=="臺東縣"or key[1]=="宜蘭縣"):
      CITY2_COUNT_ARRAY[2]=CITY2_COUNT_ARRAY[2]+1
    elif(key[1]=="高雄市" or key[1]=="台南市" or key[1]=="嘉義市" or key[1]=="嘉義縣"or key[1]=="屏東縣"):
      CITY2_COUNT_ARRAY[3]=CITY2_COUNT_ARRAY[3]+1
    elif(key[1]=="澎湖縣" or key[1]=="金門縣" or key[1]=="連江縣"):
      CITY2_COUNT_ARRAY[4]=CITY2_COUNT_ARRAY[4]+1
  CITY_ARRAY.append(key[1])

print("城市數量:",CITY_class.shape[0]-1)
print("城市種類:",CITY_class[:])

#長條圖
font = fm.FontProperties(fname=fontPath, size=10)
plt.title("城市統計", x=0.5, y=1.03,FontProperties=font)
plt.bar(    CITY_class, 
        CITY_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='#a17cf2'
        )

plt.ylabel("數量",FontProperties=font)
plt.xlabel("種類",FontProperties=font)
plt.xticks(rotation=90,FontProperties=font)
plt.yticks(rotation=0,FontProperties=font)
plt.show()
plt.close()
#圓餅圖

pictures,category_text,percent_text = plt.pie(
        CITY2_COUNT_ARRAY,              # 數值
        #colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = CITY2_ARRAY,       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
fontPath ='/content/drive/My Drive/Colab Notebooks/font/TaipeiSansTCBeta-Regular.ttf'
font = fm.FontProperties(fname=fontPath, size=15)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("城市區域比例", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖

plt.show()
plt.close()

"""# 7.鄉鎮區"""

#鄉鎮區
DISTRICT = df.groupby(["ID","CITY","DISTRICT"])
DISTRICT_class=df["DISTRICT"].unique() 

DISTRICT_ARRAY=[]
DISTRICT_COUNT_ARRAY=np.zeros(DISTRICT_class.shape[0],int)

i=0
count=0
for key,group in DISTRICT:
  i=i+1
  for j in range(0,DISTRICT_class.shape[0]):
    if(DISTRICT_class[j]==key[2]):
      DISTRICT_COUNT_ARRAY[j]=DISTRICT_COUNT_ARRAY[j]+1
  DISTRICT_ARRAY.append(key[2])

print("鄉鎮區數量:",DISTRICT_class.shape[0]-1)
print("鄉鎮區種類:",DISTRICT_class[:])

#長條圖
font = fm.FontProperties(fname=fontPath, size=10)
plt.title("鄉鎮區統計", x=0.5, y=1.03,FontProperties=font)
plt.bar(    DISTRICT_class, 
        DISTRICT_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("數量",FontProperties=font)
plt.xlabel("種類",FontProperties=font)
plt.xticks(rotation=90,FontProperties=font)
plt.yticks(rotation=0,FontProperties=font)
plt.show()
plt.close()

"""#8.教育程度"""

#教育程度
EDUCATION = df.groupby(["ID","EDUCATION"])
EDUCATION_COUNT=df["EDUCATION"].unique() #所有消費者ID
EDUCATION_class=[0,0,0,0,0]
EDUCATION_ARRAY=[]
for key,group in EDUCATION:
  if(key[1]==EDUCATION_COUNT[0]):
    EDUCATION_class[0]=EDUCATION_class[0]+1
  elif(key[1]==EDUCATION_COUNT[1]):
    EDUCATION_class[1]=EDUCATION_class[1]+1
  elif(key[1]==EDUCATION_COUNT[2]):
    EDUCATION_class[2]=EDUCATION_class[2]+1
  elif(key[1]==EDUCATION_COUNT[3]):
    EDUCATION_class[3]=EDUCATION_class[3]+1
  elif(key[1]==EDUCATION_COUNT[4]):
    EDUCATION_class[4]=EDUCATION_class[4]+1
  EDUCATION_ARRAY.append(key[1])


print("教育程度數量:",EDUCATION_COUNT.shape[0],"\n教育程度類別:",EDUCATION_COUNT)
print("教育程度人數(人):\n",EDUCATION_COUNT[0],":",EDUCATION_class[0],"人","\n",
      EDUCATION_COUNT[1],":",EDUCATION_class[1],"人","\n",
      EDUCATION_COUNT[2],":",EDUCATION_class[2],"人","\n",
      EDUCATION_COUNT[3],":",EDUCATION_class[3],"人","\n",
      EDUCATION_COUNT[4],":",EDUCATION_class[4],"人","\n")
#長條圖
plt.title("EDUCATION_NUMBER", x=0.5, y=1.03)
plt.bar(EDUCATION_COUNT,
        EDUCATION_class, 
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue',
        )

plt.ylabel("EDUCATION")
plt.xlabel("教育",FontProperties=font)
plt.xticks(rotation=270,FontProperties=font)
plt.show()
plt.close()

"""#9.年收入"""

#年收入
ANNU_INCOME = df.groupby(["ID","ANNU_INCOME"])
ANNU_INCOME_ARRAY=[]
ANNU_INCOME_TOTAL=0
ANNU_INCOME_COUNT_ARRAY=[0,0,0,0]
for key,group in ANNU_INCOME:
  
  temp=str(key[1]).split('$')[-1]
  temp=str(temp).split('.00')[0]
  temp=str(temp).split(',')
  if(np.array(temp).shape[0]>1):
    if(temp[1]=="000"):
      temp=temp[0]
      temp=int(temp)*1000
  else:
    temp=temp[0]
  temp=int(temp)
  if(temp<300000):
    ANNU_INCOME_COUNT_ARRAY[0]=ANNU_INCOME_COUNT_ARRAY[0]+1
  elif(temp>=300000 and temp<500000):
    ANNU_INCOME_COUNT_ARRAY[1]=ANNU_INCOME_COUNT_ARRAY[1]+1
  elif(temp>=500000 and temp<700000):
    ANNU_INCOME_COUNT_ARRAY[2]=ANNU_INCOME_COUNT_ARRAY[2]+1
  elif(temp>=700000):
    ANNU_INCOME_COUNT_ARRAY[3]=ANNU_INCOME_COUNT_ARRAY[3]+1
  ANNU_INCOME_ARRAY.append(temp)
  ANNU_INCOME_TOTAL=ANNU_INCOME_TOTAL+temp
ANNU_INCOME_ARRAY.sort()

print("==========================================9.年收入==========================================")
print("最大為:",max(ANNU_INCOME_ARRAY))
print("最小為:",min(ANNU_INCOME_ARRAY))
print("範圍:",max(ANNU_INCOME_ARRAY)-min(ANNU_INCOME_ARRAY))
print("平均:",round(statistics.mean(ANNU_INCOME_ARRAY),2))
print("中位數:",round(statistics.median(ANNU_INCOME_ARRAY),2))
print("標準誤差:",round(sem(ANNU_INCOME_ARRAY),2))
print("標準差:",round(statistics.stdev(ANNU_INCOME_ARRAY),2))
print("變異數:",round(statistics.variance(ANNU_INCOME_ARRAY),2))
print("歪斜率:",round(skew(ANNU_INCOME_ARRAY),2))
print("總和:",round(sum(ANNU_INCOME_ARRAY),2))
print("數量:",i)
print("年收入小於30w:",ANNU_INCOME_COUNT_ARRAY[0],"人")
print("年收入介於30w~50w:",ANNU_INCOME_COUNT_ARRAY[1],"人")
print("年收入介於50w~70w:",ANNU_INCOME_COUNT_ARRAY[2],"人")
print("年收入大於70w:",ANNU_INCOME_COUNT_ARRAY[3],"人")
#長條圖
ANNU_INCOME_class=["小於30w","介於30w~50w","介於50w~70w","大於70w"]
plt.title("ANNU_INCOME", x=0.5, y=1.03)
plt.bar(
        ANNU_INCOME_class, 
        ANNU_INCOME_COUNT_ARRAY[0:4],
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )
font = fm.FontProperties(fname=fontPath, size=10)
plt.ylabel("人數",FontProperties=font)
plt.xlabel("子女數狀況",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.show()
plt.close()

"""#10.有無私人交通工具"""

#有無私人交通工具
PRIVATE_VEHICLE = df.groupby(["ID","PRIVATE_VEHICLE"])
PRIVATE_VEHICLE_ARRAY=[]
PRIVATE_VEHICLE_TOTAL=0
i=0
for key,group in PRIVATE_VEHICLE:
  i=i+1
  PRIVATE_VEHICLE_ARRAY.append(key[1])
  PRIVATE_VEHICLE_TOTAL=PRIVATE_VEHICLE_TOTAL+key[1]

print("有交通工具人數:",PRIVATE_VEHICLE_TOTAL)
print("無交通工具人數:",i-PRIVATE_VEHICLE_TOTAL)

pictures,category_text,percent_text = plt.pie(
        [PRIVATE_VEHICLE_TOTAL,i-PRIVATE_VEHICLE_TOTAL],              # 數值
        colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = ["有交通工具","無交通工具"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("PRIVATE_VEHICLE", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#11.有無通勤習慣"""

#有無私人交通工具
COMMUTE = df.groupby(["ID","COMMUTE"])
COMMUTE_ARRAY=[]
COMMUTE_TOTAL=0
i=0
for key,group in COMMUTE:
  i=i+1
  COMMUTE_ARRAY.append(key[1])
  COMMUTE_TOTAL=COMMUTE_TOTAL+key[1]

print("有通勤習慣人數:",COMMUTE_TOTAL)
print("無通勤習慣人數:",i-COMMUTE_TOTAL)

pictures,category_text,percent_text = plt.pie(
        [COMMUTE_TOTAL,i-COMMUTE_TOTAL],              # 數值
        colors = ["#9faeef","#f0ef93"],         # 指定圓餅圖的顏色
        labels = ["有通勤習慣","無通勤習慣"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("COMMUTE", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#12.子女數"""

#子女數
CHILDREN = df.groupby(["ID","CHILDREN"])
CHILDREN_ARRAY=[]
CHILDREN_TOTAL=0
CHILDREN_COUNT_ARRAY=[0,0,0,0,0,0]
i=0
count=0
for key,group in CHILDREN:
  if(key[1]):
    i=i+1
    CHILDREN_ARRAY.append(key[1])
    if(key[1]=="NULL"):
      CHILDREN_COUNT_ARRAY[1]=CHILDREN_COUNT_ARRAY[1]+1
    elif(key[1]==1):
      CHILDREN_COUNT_ARRAY[2]=CHILDREN_COUNT_ARRAY[2]+1
    elif(key[1]==2):
      CHILDREN_COUNT_ARRAY[3]=CHILDREN_COUNT_ARRAY[3]+1
    elif(key[1]==3):
      CHILDREN_COUNT_ARRAY[4]=CHILDREN_COUNT_ARRAY[4]+1
    else:
      CHILDREN_COUNT_ARRAY[5]=CHILDREN_COUNT_ARRAY[5]+1
  else:
    CHILDREN_COUNT_ARRAY[0]=CHILDREN_COUNT_ARRAY[0]+1
print("==========================================12.子女數==========================================")
print("未婚人數:",CHILDREN_COUNT_ARRAY[0])
print("結婚且有子女:",i-CHILDREN_COUNT_ARRAY[1])
print("結婚但無子女:",CHILDREN_COUNT_ARRAY[1])
print("子女人數為1人:",CHILDREN_COUNT_ARRAY[2])
print("子女人數為2人:",CHILDREN_COUNT_ARRAY[3])
print("子女人數為3人:",CHILDREN_COUNT_ARRAY[4])
print("子女人數為3人以上:",CHILDREN_COUNT_ARRAY[5])
#長條圖
CHILDREN_class=["未婚","1人","2人","3人","3人以上"]
plt.title("CHILDREN", x=0.5, y=1.03)
plt.bar(
        CHILDREN_class, 
        CHILDREN_COUNT_ARRAY[1:6],
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("人數",FontProperties=font)
plt.xlabel("子女數狀況",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.show()
plt.close()

"""#13.交易日期"""

#子女數
DATE = df["DATE"]
DATE_ARRAY=[]
DATE_TOTAL=0
MONTH_ARRAY=[]
DAT_ARRAY=[]
MONTH_COUNT_ARRAY=[0,0,0,0,0,0,0,0,0,0,0,0]
DATE_COUNT_ARRAY=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
i=0
count=0
for key in DATE:
  i=i+1
  month=int(key[5:7])#月份
  dat=int(key[8:10])#日期
  MONTH_COUNT_ARRAY[month-1]=MONTH_COUNT_ARRAY[month-1]+1
  DATE_COUNT_ARRAY[dat-1]=DATE_COUNT_ARRAY[dat-1]+1
print("總消費數量",i)
print("==========================================13.交易日期==========================================")
for j in range(0,12):
  print(j+1,"月","消費數量:",MONTH_COUNT_ARRAY[j])
  
  MONTH_ARRAY.append(j+1)
for k in range(0,31):
  print(k+1,"日","消費數量:",DATE_COUNT_ARRAY[k])
  DAT_ARRAY.append(k+1)
#長條圖
plt.title("2016年每月消費數量", x=0.5, y=1.03,FontProperties=font)
plt.bar(
        MONTH_ARRAY, 
        MONTH_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("消費數量",FontProperties=font)
plt.xlabel("月份",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.show()
plt.close()

#長條圖
plt.title("每日消費數量", x=0.5, y=1.03,FontProperties=font)
plt.bar(    DAT_ARRAY, 
        DATE_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightpink'
        )

plt.ylabel("消費數量",FontProperties=font)
plt.xlabel("日期",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.show()
plt.close()

"""#14.消費種類"""

#消費種類
MCC_CAT =df["MCC_CAT"]
MCC_CAT_class =df["MCC_CAT"].unique()
MCC_CAT_ARRAY=[]
MCC_CAT_TOTAL=0
MCC_CAT_COUNT_ARRAY=np.zeros(MCC_CAT_class.shape[0],int)
i=0
count=0
for key in MCC_CAT:
  i=i+1
  for j in range(0,MCC_CAT_class.shape[0]):
    if(MCC_CAT_class[j]==key):
      MCC_CAT_COUNT_ARRAY[j]=MCC_CAT_COUNT_ARRAY[j]+1
print("==========================================15.交易金額==========================================")
print("種類數量:",MCC_CAT_class.shape[0])
print("種類:",MCC_CAT_class[:])

#長條圖
font = fm.FontProperties(fname=fontPath, size=10)
plt.title("消費種類統計", x=0.5, y=1.03,FontProperties=font)
plt.bar(    MCC_CAT_class, 
        MCC_CAT_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("消費數量",FontProperties=font)
plt.xlabel("種類",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.yticks(rotation=0,FontProperties=font)
plt.show()
plt.close()
#圓餅圖
pictures,category_text,percent_text = plt.pie(
        MCC_CAT_COUNT_ARRAY,              # 數值
        #colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = MCC_CAT_class,       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("消費種類比例", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#15. MCC_CAT (交易金額)"""

#交易金額
AMOUNT =df["AMOUNT"]
AMOUNT_ARRAY=[]
AMOUNT_TOTAL=0
#AMOUNT_COUNT_ARRAY=np.zeros(AMOUNT_class.shape[0],int)
i=0
count=0
for key in AMOUNT:
  i=i+1
  temp=str(key).split('$')[-1]
  temp=str(temp).split('.00')[0]
  temp=str(temp).split('.0')[0]
  temp=str(temp).split(',')
  if(np.array(temp).shape[0]>1):
    if(temp[1]=="000"):
      temp=temp[0]
      temp=int(temp)*1000
  else:
    temp=temp[0]
  temp=int(temp)

  AMOUNT_ARRAY.append(temp)
  AMOUNT_TOTAL=AMOUNT_TOTAL+temp
AMOUNT_ARRAY.sort()
print("==========================================15.交易金額==========================================")
print("最大為:",max(AMOUNT_ARRAY))
print("最小為:",min(AMOUNT_ARRAY))
print("範圍:",max(AMOUNT_ARRAY)-min(AMOUNT_ARRAY))
print("平均:",round(statistics.mean(AMOUNT_ARRAY),2))
print("中位數:",round(statistics.median(AMOUNT_ARRAY),2))
print("標準誤差:",round(sem(AMOUNT_ARRAY),2))
print("標準差:",round(statistics.stdev(AMOUNT_ARRAY),2))
print("變異數:",round(statistics.variance(AMOUNT_ARRAY),2))
print("歪斜率:",round(skew(AMOUNT_ARRAY),2))
print("總和:",round(sum(AMOUNT_ARRAY),2))
print("數量:",i)

"""#16. CARD_TYPE(信用卡別)"""

#消費種類
CARD_TYPE =df["CARD_TYPE"]
CARD_TYPE_class =df["CARD_TYPE"].unique()
CARD_TYPE_ARRAY=[]
CARD_TYPE_TOTAL=0
CARD_TYPE_COUNT_ARRAY=np.zeros(CARD_TYPE_class.shape[0],int)
i=0
count=0
for key in CARD_TYPE:
  i=i+1
  for j in range(0,CARD_TYPE_class.shape[0]):
    if(CARD_TYPE_class[j]==key):
      CARD_TYPE_COUNT_ARRAY[j]=CARD_TYPE_COUNT_ARRAY[j]+1
print("==========================================16. CARD_TYPE(信用卡別)==========================================")
print("種類數量:",CARD_TYPE_class.shape[0])
print("種類:",CARD_TYPE_class[:])

#長條圖
font = fm.FontProperties(fname=fontPath, size=10)
plt.title("信用卡別統計", x=0.5, y=1.03,FontProperties=font)
plt.bar(    CARD_TYPE_class, 
        CARD_TYPE_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("消費數量",FontProperties=font)
plt.xlabel("種類",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.yticks(rotation=0,FontProperties=font)
plt.show()
plt.close()
#圓餅圖
pictures,category_text,percent_text = plt.pie(
        CARD_TYPE_COUNT_ARRAY,              # 數值
        #colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = CARD_TYPE_class,       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("信用卡別比例", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#17. PAYBY(付款別)"""

#消費種類
PAYBY=df["PAYBY"]
PAYBY_class=df["PAYBY"].unique()
PAYBY_ARRAY=[]
PAYBY_TOTAL=0
PAYBY_COUNT_ARRAY=np.zeros(PAYBY_class.shape[0],int)
i=0
count=0
for key in PAYBY:
  i=i+1
  for j in range(0,PAYBY_class.shape[0]):
    if(PAYBY_class[j]==key):
      PAYBY_COUNT_ARRAY[j]=PAYBY_COUNT_ARRAY[j]+1
print("==========================================17. PAYBY(付款別)==========================================")
print("種類數量:",PAYBY_class.shape[0])
print("種類:",PAYBY_class[:])

#長條圖
font = fm.FontProperties(fname=fontPath, size=10)
plt.title("付款別統計", x=0.5, y=1.03,FontProperties=font)
plt.bar(    PAYBY_class, 
        PAYBY_COUNT_ARRAY,
        width=0.5, 
        bottom=None, 
        align='center', 
        color='lightblue'
        )

plt.ylabel("付款別數量",FontProperties=font)
plt.xlabel("種類",FontProperties=font)
plt.xticks(rotation=0,FontProperties=font)
plt.yticks(rotation=0,FontProperties=font)
plt.show()
plt.close()
#圓餅圖
pictures,category_text,percent_text = plt.pie(
        PAYBY_COUNT_ARRAY,              # 數值
        #colors = ["#85aded","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = PAYBY_class,       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("消費種類比例", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#18. MOBILE_PAYMENT(是否使用行動支付)"""

#是否使用行動支付
MOBILE_PAYMENT = df.groupby(["ID","MOBILE_PAYMENT"])
MOBILE_PAYMENT_ARRAY=[]
MOBILE_PAYMENT_COUNT_ARRAY=[0,0,0]
MOBILE_PAYMENT_TOTAL=0
i=0
for key,group in MOBILE_PAYMENT:
  i=i+1
  MOBILE_PAYMENT_ARRAY.append(key[1])
  x=int(key[1])
  MOBILE_PAYMENT_COUNT_ARRAY[x]=MOBILE_PAYMENT_COUNT_ARRAY[x]+1
print("==========================================18.是否使用行動支付==========================================")
print("有使用行動支付筆數:",MOBILE_PAYMENT_COUNT_ARRAY[1])
print("無使用行動支付筆數:",MOBILE_PAYMENT_COUNT_ARRAY[0])

pictures,category_text,percent_text = plt.pie(
        MOBILE_PAYMENT_COUNT_ARRAY,              # 數值
        labels = ["有使用行動支付","無使用行動支付","其他"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影

for t in category_text:
    t.set_fontproperties(font)
#plt.legend(loc = "center left",prop = font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("行動支付", x=0.5, y=1.03,FontProperties=font)
# 畫出圓餅圖
plt.show()
plt.close()

"""#19.QUANTITY(訂購量)"""

#交易金額
QUANTITY =df["QUANTITY"]
QUANTITY_ARRAY=[]
QUANTITY_TOTAL=0

i=0
count=0


for key in QUANTITY:
  i=i+1
  QUANTITY_ARRAY.append(key)
  QUANTITY_TOTAL=QUANTITY_TOTAL+key
QUANTITY_ARRAY.sort()
print("==========================================19.訂購量==========================================")
print("最大為:",max(QUANTITY_ARRAY))
print("最小為:",min(QUANTITY_ARRAY))
print("範圍:",max(QUANTITY_ARRAY)-min(QUANTITY_ARRAY))
print("平均:",round(statistics.mean(QUANTITY_ARRAY),2))
print("中位數:",round(statistics.median(QUANTITY_ARRAY),2))
print("標準誤差:",round(sem(QUANTITY_ARRAY),2))
print("標準差:",round(statistics.stdev(QUANTITY_ARRAY),2))
print("變異數:",round(statistics.variance(QUANTITY_ARRAY),2))
print("歪斜率:",round(skew(QUANTITY_ARRAY),2))
print("總和:",round(sum(QUANTITY_ARRAY),2))
print("數量:",i)

"""#20. AD_EXPO(是否投放廣告)"""

#是否投放廣告
AD_EXPO = df["AD_EXPO"]
AD_EXPO_ARRAY=[]
AD_EXPO_COUNT_ARRAY=[0,0]

for key in AD_EXPO:
  x=int(key)
  AD_EXPO_COUNT_ARRAY[x]=AD_EXPO_COUNT_ARRAY[x]+1
  AD_EXPO_ARRAY.append(key)
print("==========================================20.是否投放廣告==========================================")  
print("有投放廣告:",AD_EXPO_COUNT_ARRAY[1],"沒有投放廣告:",AD_EXPO_COUNT_ARRAY[0])

pictures,category_text,percent_text = plt.pie(
        AD_EXPO_COUNT_ARRAY,              # 數值
        colors = ["#ffbf66","#d0ebc3"],         # 指定圓餅圖的顏色
        labels = ["沒有","有"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影
# 設定legnd的位置
# plt.legend(loc = "upper right",style=font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("AD_EXPO", x=0.5, y=1.03)
# 畫出圓餅圖
for t in category_text:
    t.set_fontproperties(font)
plt.show()
plt.close()

"""#21. AD_CLICK(是否點擊廣告)"""

#是否點擊廣告
AD_CLICK = df["AD_CLICK"]
AD_CLICK_ARRAY=[]
AD_CLICK_COUNT_ARRAY=[0,0,0]

for key in AD_CLICK:
  x=int(key)
  if(x==-1):
    AD_CLICK_COUNT_ARRAY[2]=AD_CLICK_COUNT_ARRAY[2]+1
  else:
    AD_CLICK_COUNT_ARRAY[x]=AD_CLICK_COUNT_ARRAY[x]+1
  
  AD_CLICK_ARRAY.append(key)
  
print("==========================================21.是否點擊廣告==========================================")
print("有點擊廣告:",AD_CLICK_COUNT_ARRAY[1],"沒有點擊廣告:",AD_CLICK_COUNT_ARRAY[0])

pictures,category_text,percent_text = plt.pie(
        AD_CLICK_COUNT_ARRAY[0:2],              # 數值
        colors = ["#86aded","#d0abc3"],         # 指定圓餅圖的顏色
        labels = ["沒有","有"],       # 分類的標記
        autopct = "%0.2f%%",      # 四捨五入至小數點後面位數
        shadow=False)           # 是否使用陰影
# 設定legnd的位置
# plt.legend(loc = "upper right",style=font)
# 設定圖片標題，以及指定字型設定，x代表與圖案最左側的距離，y代表與圖片的距離
plt.title("AD_CLICK", x=0.5, y=1.03)
# 畫出圓餅圖
for t in category_text:
    t.set_fontproperties(font)
plt.show()
plt.close()

"""#22.AD_TIME(廣告停留時間)"""

#廣告停留時間
AD_TIME =df["AD_TIME"]
AD_TIME_ARRAY=[]
AD_TIME_TOTAL=0
i=0
count=0
for key in AD_TIME:
  if(key!=0):
    i=i+1
    AD_TIME_ARRAY.append(key)
    AD_TIME_TOTAL=AD_TIME_TOTAL+key
AD_TIME_ARRAY.sort()
print("==========================================22.廣告停留時間==========================================")
print("最大為:",max(AD_TIME_ARRAY))
print("最小為:",min(AD_TIME_ARRAY))
print("範圍:",max(AD_TIME_ARRAY)-min(AD_TIME_ARRAY))
print("平均:",round(statistics.mean(AD_TIME_ARRAY),2))
print("中位數:",round(statistics.median(AD_TIME_ARRAY),2))
print("標準誤差:",round(sem(AD_TIME_ARRAY),2))
print("標準差:",round(statistics.stdev(AD_TIME_ARRAY),2))
print("變異數:",round(statistics.variance(AD_TIME_ARRAY),2))
print("歪斜率:",round(skew(AD_TIME_ARRAY),2))
print("總和:",round(sum(AD_TIME_ARRAY),2))
print("數量:",i)

"""#task2資料表

#fact table
"""

data = df.groupby(["SEX","AGE","CITY","DISTRICT","ANNU_INCOME","DATE","PAYBY","QUANTITY","MCC_CAT","AMOUNT","AD_TIME"])
locate = df.groupby(["CITY","DISTRICT"])
DATE = df["DATE"].unique()

data_ARRAY=[]
data_TOTAL=0
i=0
count=0
datatable=[]
c=0
for key,group in data:
  c=c+1
  print(c)
#性別============================================
  if(key[0]=="女"):
    sex=0
  elif(key[0]=="男"):
    sex=1

#年齡============================================  
  if(key[1]<=19 and key[1]>=10):
    age=1
  elif(key[1]<=29 and key[1]>=20):
    age=2
  elif(key[1]<=39 and key[1]>=30):
    age=3
  elif(key[1]<=49 and key[1]>=40):
    age=4
  elif(key[1]<=59 and key[1]>=50):
    age=5
  elif(key[1]<=69 and key[1]>=60):
    age=6
  elif(key[1]<=79 and key[1]>=70):
    age=7




#居住地============================================
  i=0
  for key2,group in locate:
    i=i+1
    if(key2[0]==key[2] and key2[1]==key[3]):
      location=i
      break
#年收入============================================
  temp=str(key[4]).split('$')[-1]
  temp=str(temp).split('.00')[0]
  temp=str(temp).split(',')
  if(np.array(temp).shape[0]>1):
    if(temp[1]=="000"):
      temp=temp[0]
      temp=int(temp)*1000
  else:
    temp=temp[0]

  if(int(temp)>0 and int(temp)<=300000):
    income=1
  elif(int(temp)>300000 and int(temp)<=500000):
    income=2
  elif(int(temp)>500000 and int(temp)<=700000):
    income=3
  else:
    income=4
#交易日期============================================ 
  i=0
  for key3 in DATE:
    i=i+1
    if(key3==key[5]):
      date=i
      break
#消費種類============================================ 

  if(key[8]=="服飾用品"):
    consume=1
  elif(key[8]=="美妝保健"):
    consume=2
  elif(key[8]=="電器用品"):
    consume=3
  elif(key[8]=="生活百貨"):
    consume=4
  elif(key[8]=="教育娛樂"):
    consume=5
  elif(key[8]=="食品飲料"):
    consume=6
  elif(key[8]=="其他"):
    consume=7
 

#付款別==============================================
  if(key[6]=="貨到付款"):
    pay=1
  elif(key[6]=="信用卡"):
    pay=2
  elif(key[6]=="ATM轉帳"):
    pay=3
#訂購量==============================================
  
  quantity=key[7]

#交易金額==============================================
  temp2=str(key[9]).split('$')[-1]
  temp2=str(temp2).split('.00')[0]
  temp2=str(temp2).split('.0')[0]
  temp2=str(temp2).split(',')
  if(np.array(temp2).shape[0]>1):
    if(temp2[1]=="000"):
      temp2=temp2[0]
      temp2=int(temp2)*1000
  else:
    temp2=temp2[0]
  temp2=int(temp2)
  amount=temp2
#廣告時間==============================================
  ad=int(key[10])
  datatable.append([sex,age,location,income,date,consume,pay,quantity,amount,ad])#性別、年齡、城市、居住、日期、消費種類、付款別、訂購量、交易金額
with open('/content/drive/My Drive/Colab Notebooks/bigdata/data.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  # 寫入二維表格
  writer.writerows(datatable)
print("資料寫入完成")

"""#日期"""

import csv
DATE = df["DATE"].unique()
DATE_ARRAY=[]
temp=[]
i=0
for key in DATE:
  i=i+1
  temp=[]
  year=int(key[0:4])#年分
  month=int(key[5:7])#月份
  if(month==1 or month==2 or month==3):
    season=1
  elif(month==4 or month==5 or month==6):
    season=2
  elif(month==7 or month==8 or month==9):
    season=3
  elif(month==10 or month==11 or month==12):
    season=4
  day=int(key[8:10])#日期
  temp=[i,year,season,month,day]
  DATE_ARRAY.append(temp)

with open('/content/drive/My Drive/Colab Notebooks/bigdata/date.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  # 寫入二維表格
  writer.writerows(DATE_ARRAY)
print("資料寫入完成")

"""#location"""

import csv
location = df.groupby(["DISTRICT","CITY"])
location_ARRAY=[]
location_TOTAL=0
i=0
for key,group in location:
  i=i+1
  
  if(key[1]=="台北市" or key[1]=="新北市" or key[1]=="基隆市" or key[1]=="新竹市"or key[1]=="桃園市"or key[1]=="新竹縣"):
    x="北部"
  elif(key[1]=="台中市" or key[1]=="苗栗縣" or key[1]=="彰化縣" or key[1]=="南投縣"or key[1]=="雲林縣"):
    x="中部"
  elif(key[1]=="花蓮縣" or key[1]=="臺東縣"or key[1]=="宜蘭縣"):
    x="東部"
  elif(key[1]=="高雄市" or key[1]=="台南市" or key[1]=="嘉義市" or key[1]=="嘉義縣"or key[1]=="屏東縣"):
    x="南部"
  elif(key[1]=="澎湖縣" or key[1]=="金門縣" or key[1]=="連江縣"):
    x="離島"
  elif(key[1]=="無資料"):
    x="無資料"

  temp=[i,x,key[1],key[0]]
  location_ARRAY.append(temp)
with open('/content/drive/My Drive/Colab Notebooks/bigdata/location.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  # 寫入二維表格
  writer.writerows(location_ARRAY)
print("資料寫入完成")

df1 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/bigdata/location.csv',encoding="utf-8")
print(df1)

"""#消費種類"""

MCC_CAT =df["MCC_CAT"]
MCC_CAT_class =df["MCC_CAT"].unique()
consume_ARRAY=[]
i=0
count=0
for key in MCC_CAT_class:
  i=i+1
  consume_ARRAY.append([i,key])
with open('/content/drive/My Drive/Colab Notebooks/bigdata/consume.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  # 寫入二維表格
  writer.writerows(consume_ARRAY)
print("資料寫入完成")